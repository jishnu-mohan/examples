service: serverless-rest-api-with-dynamodb

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  region: ${file(./serverless.env.yml):${opt:stage}.AWS_REGION}
  runtime: nodejs10.x
  versionFunctions: false
  environment:
    DYNAMODB_TABLE: ${file(./serverless.env.yml):${opt:stage}.DYNAMODB_TABLE}
  role: DynamoDBAccessRole

functions:
  create:
    handler: todos/create.create
    events:
      - http:
          path: todos
          method: post
          cors: true

  list:
    handler: todos/list.list
    events:
      - http:
          path: todos
          method: get
          cors: true

  get:
    handler: todos/get.get
    events:
      - http:
          path: todos/{id}
          method: get
          cors: true

  update:
    handler: todos/update.update
    events:
      - http:
          path: todos/{id}
          method: put
          cors: true

  delete:
    handler: todos/delete.delete
    events:
      - http:
          path: todos/{id}
          method: delete
          cors: true

resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${file(./serverless.env.yml):${opt:stage}.DYNAMODB_TABLE}
    
    DynamoDBAccessRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: DynamoDBAccessRole-${opt:stage}
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: "lambda.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: LambdaDynamoDBAccess-${opt:stage}
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Action:  
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                    - dynamodb:DeleteItem
                  Effect: "Allow"
                  Resource:
                    - "arn:aws:dynamodb:${file(./serverless.env.yml):${opt:stage}.AWS_REGION}:${file(./serverless.env.yml):${opt:stage}.AWS_ACCOUNT_ID}:table/${file(./serverless.env.yml):${opt:stage}.DYNAMODB_TABLE}"
                    - "arn:aws:dynamodb:${file(./serverless.env.yml):${opt:stage}.AWS_REGION}:${file(./serverless.env.yml):${opt:stage}.AWS_ACCOUNT_ID}:table/${file(./serverless.env.yml):${opt:stage}.DYNAMODB_TABLE}/*"
